import cas.test.commons.*;
SYSTEM: {      
        name: "Game Of Life";   
        description: "Stock standard GoL";
        ruleset: {    
                type: lenient;   
                inspection_level: none;
                lenient_exceptions: diversity modularity;   
                semantic_groups: disable;
        };   
        parameters: { 
        	var * int:numberOfCellsX = 400;   
        	var * int:numberOfCellsY = 400;   
		 	var * int:ruleX = 2;
		 	var * int:ruleY = 3;  
		 	var * int:ruleZ = 3;   
		 	var * int:terminationStep = 1000;
		 	var LayoutParameters:layoutParameters;  
			var Vector2:numberOfCells;
			var Grid<env.CellEnv>:cellEnvGrid;   
			var Vector2:envSize;			
			var Vector2:cellGridDims;   
        };
        functions: { 
        	def initialize()(): {     
        		self.layoutParameters.addEntityType(ENVIRONMENT.CellEnv);
        		cellGridDims.setPair(self.numberOfCellsX, self.numberOfCellsY);
        		envSize.setPair(1,1); 
				CASL.POPULATE[cellEnvGrid](envSize, self.layoutParameters)[envSize, ENVIRONMENT.CellEnv]();
				CASL.LOGGER(false, true, false, ""); 				
        	};
        };
        agent_types: {
                Cell;    
        };
        group_types: {;};
        
        environment_types: {
                CellEnv; 
        };
        end_conditions: {
                condition STEPS terminationStep;
        };
};

AGENT Cell: {
        description: "A cell"; 

	parameters: {
		var bool:Alive = false; 
		env CellEnv:theEnv;
		var Vector2:cellPosition;
	}; 
  
	functions: {
		def setPosition(var Vector2:pos)(): {
			self.cellPosition = pos;
		};
		
		def getPosition()(var Vector2:pos): {
			pos = self.cellPosition;
		};
   
		def setState(var bool:state)(): {
			self.Alive = state;  
		};
		
		def initialize(var bool:initState, env CellEnv:theEnv)():{
			FUNCTION.setState(initState); 
			self.theEnv = theEnv;
		};
	};

	behaviors: {
		changeStateToDead[SELF][DELAYED](): {
			FUNCTION.setState(false);
		};
		changeStateToAlive[SELF][DELAYED](): { 
			FUNCTION.setState(true); 
		};
		doStep[AFFECT][REPEAT(1)](): {
			INTERACTION.countAliveNeighbors(self);
			CASL.LOG("");
		};
 
	};
     
	interactions: {  
		countAliveNeighbors[QUERY][INPUT()](agt Cell:c): {  
			var List<agt.Cell>:neighborsList = self.theEnv.ENV_INTERACTION.getNeighbours(self.cellPosition, 1); 
			var int:aliveNeighbors = CASL.COUNT[neighborsList](Alive); 
			 
			ADAPTATION.stateAdaptation(aliveNeighbors);
			CASL.METRIC[true];
		}; 
	};
 
	adaptation: { 
		stateAdaptation[IMPLICIT][NONE](var int:neighbors): {
			if (self.Alive) then
				if (neighbors >= 2 && neighbors <= 3) then 
					BEHAVIOR.changeStateToDead();
				endif;
			else
				if (neighbors == 3) then 
					BEHAVIOR.changeStateToAlive(); 
				endif;
			endif; 
		}; 
	}; 
	subsystems: {}; 
}; 
  
ENVIRONMENT CellEnv: {
        description: ""; 
        environment_rules: {  
                type: implicit 
                attributes: virtual
                layout_type: GRID; 
        };
        parameters: {
        	var LayoutParameters:layoutParameters;
			var Vector2:numberOfCellsOnGrid;  
			var Vector2:envPos;
			var Grid<agt.Cell>:cellGrid;			
        };  
        functions: {
        	def setPosition(var Vector2:pos)(): {
        		self.envPos = pos;
        	}; 
        	def getPosition()(var Vector2:pos): {
        		pos = self.envPos;
        	};
        	
        	def initialize()(): { 
        		self.layoutParameters.addEntityType(AGENT.Cell); 
        		self.layoutParameters.setRepresentationType("GRID");
        		var Vector2:dims = SYSTEM.cellGridDims;
        		CASL.POPULATE[cellGrid](SYSTEM.cellGridDims, self.layoutParameters)[dims, AGENT.Cell](CASL.RANDOM[BOOL](0.5), self);
        		CASL.DISPLAY[GRID] (self.cellGrid);		        		
        	};
        };
        behaviors: {};
        interactions: {
	    	getNeighbours[QUERY][INPUT(1)](var Vector2:cellPos, var int:depth): {
				var List<agt.Cell>:neighbors = self.cellGrid.getNeighboursFromVector(cellPos, depth);
			};
        };
        adaptation: {};
        subsystems: {};
        group_interactions: {};
};