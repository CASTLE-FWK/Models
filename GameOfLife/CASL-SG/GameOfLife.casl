import cas.test.commons.*;  
SYSTEM: {
	name: "GameOfLifeSG";  
    
	description: ""; 
	ruleset: {     
		type: lenient;   
		inspection_level: strong;   
		lenient_exceptions: diversity modularity;
		semantic_groups: enable; 
	};
	       
	parameters: { 
		//Items with * will be generated in the initialization file
		
		//2 x 2 CellCities
	 	var * int:numCellCitiesX = 2; 
	 	var * int:numCellCitiesY = 2;   
	 	
	 	//10 x 10 Cells per CellCity
	 	var * int:numCellsPerCityX = 10;
	 	var * int:numCellsPerCityY = 10;
	 	
	 	//1 x 1 CellMegaCity
	 	var * int:numCellMegaCitiesX = 1;
	 	var * int:numCellMegaCitiesY = 1;
	 	
	 	//Run for 1000 steps
	 	var * int:terminationStep = 1000;
	 	 
	 	//These are standard parameters.
	 	var Vector2:numberOfCellMegaCities; 
	 	var Vector2:numCellCities;
	 	var Vector2:numCellsPerCity;  
	 	var Grid<env.CellMegaCity>:CellMegaCityGrid; 
	 	var LayoutParameters:layoutParameters;	 	
	};  
  
	functions: {
		def initialize()(): {
			self.layoutParameters.addEntityType(ENVIRONMENT.CellMegaCity);
			self.numCellCities.setPair(SYSTEM.numCellCitiesX, SYSTEM.numCellCitiesY);
			self.numCellsPerCity.setPair(SYSTEM.numCellsPerCityX, SYSTEM.numCellsPerCityY);
			
			self.layoutParameters.addEntityType(ENVIRONMENT.CellMegaCity);
			CASL.POPULATE[CellMegaCityGrid](numCellCities, self.layoutParameters)[numCellCities, ENVIRONMENT.CellMegaCity](self.numCellCities, self.numCellsPerCity, self.layoutParameters);
		};
	}; 
	agent_types: { 
		Cell; 		
	};
	            
	group_types: { 	 
		CellCity; 
	}; 

	environment_types: {
		CellMegaCity;  
	};  
 
	end_conditions: { 
		condition STEPS terminationStep;
	};
};

AGENT Cell: { 
	description: "A cell"; 

	parameters: {
		var bool:Alive = false; 
		grp CellCity:theCity;  
		var Vector2:cellPosition;
	};      
 
	functions: { 
		def initialize(var bool:initialLife, grp CellCity:city)(): {
			self.Alive = initialLife;
			self.theCity = city;
		}; 
  
		def setState(var bool:state)(): {
			self.Alive = state;
		};
	};    
   
	behaviors: {
		changeStateToDead[SELF][DELAYED](): {
			FUNCTION.setState(false);
		};
		changeStateToAlive[SELF][DELAYED](): { 
			FUNCTION.setState(true); 
		};
 
		doStep[AFFECT][REPEAT(1)](): {
			INTERACTION.countAliveNeighbors(self);
		};
	};  
  
	interactions: {
		countAliveNeighbors[QUERY][INPUT()](agt Cell:c): {  
			var List<agt.Cell>:neighborsList = self.theCity.GRP_INT_INTERACTION.getNeighbours(self.cellPosition, 1); 
			var int:aliveNeighbors = CASL.COUNT[neighborsList](Alive); 
			 
			ADAPTATION.stateAdaptation(aliveNeighbors);
			CASL.METRIC[true];
		}; 		    
		amIAlive[QUERY][INPUT()](): {
			self.Alive; 
		};		
	}; 
 
	adaptation: { 
		stateAdaptation[IMPLICIT][NONE](var int:neighbors): {
			if (self.Alive) then
				if (neighbors >= 2 && neighbors <= 3) then 
					BEHAVIOR.changeStateToDead();
				endif;
			else
				if (neighbors== 3) then
					BEHAVIOR.changeStateToAlive();
				endif;
			endif; 
		};
	};
	subsystems: {};   
};   
 
GROUP CellCity: {
	description: "A CellCity";	
	group_rules: {
		layout_type: GRID;
	}; 
	parameters: {
		env CellMegaCity:theEnv;
		var Neighbors<grp.CellCity>:neighbors;
		
		//Setting up representation   
		var Grid<agt.Cell>:cellGrid;
		var Vector2:numberOfCells;
		var LayoutParameters:layoutParameters;
		var Vector2:cellCityPosition;
		
		grp CellCity:ccL;
		grp CellCity:ccR;
		grp CellCity:ccD;
		grp CellCity:ccU; 
		 
		grp CellCity:ccDL;
		grp CellCity:ccUL; 
		grp CellCity:ccDR;
		grp CellCity:ccUR;
		 
	};    
	functions: {  
		def initialize(var Vector2:cells)(): {
			self.layoutParameters.addEntityType(AGENT.Cell); 
			self.numberOfCells = SYSTEM.numCellCities; 
			self.cellGrid.init(self.numberOfCells, layoutParameters);
//			self.layoutParameters.addContainedEntities(self.cellGrid);
			self.ccL = self.neighbors.getL();
			self.ccR = self.neighbors.getR();
			self.ccD = self.neighbors.getD();
			self.ccU = self.neighbors.getU();
			self.ccUL = self.neighbors.getUL();
			self.ccUR = self.neighbors.getUR();
			self.ccDL = self.neighbors.getDL();
			self.ccDR = self.neighbors.getDR();
			
			CASL.POPULATE[cellGrid](self.numberOfCells, self.layoutParameters)[self.numberOfCells, AGENT.Cell](CASL.RANDOM[BOOL](0.5), self);
		}; 
	}; 
	behaviors: {
		
	};      
	external_interactions: {
		 sendStates[SETUP][STATE][REPEAT (1)](): {  
			//Edges  
			ccL.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.LEFT, cellGrid.getAll(ENUM.GridPositions.LEFT));
			ccR.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.RIGHT,cellGrid.getAll(ENUM.GridPositions.RIGHT));
			ccD.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.DOWN,cellGrid.getAll(ENUM.GridPositions.TOP));
			ccU.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.UP,cellGrid.getAll(ENUM.GridPositions.BOTTOM));
			 
			//Corners
			ccUL.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.UPLEFT,cellGrid.getAll(ENUM.GridPositions.TOPLEFT));
			ccUR.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.UPRIGHT,cellGrid.getAll(ENUM.GridPositions.TOPRIGHT));
			ccDL.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.DOWNLEFT,cellGrid.getAll(ENUM.GridPositions.BOTTOMLEFT));
			ccDR.GRP_EXT_INTERACTION.receiveStates(ENUM.GridPositions.DOWNRIGHT,cellGrid.getAll(ENUM.GridPositions.BOTTOMRIGHT));			
		}; 

		receiveStates[SETUP][AGENT][CALLED](var GridPositions:gp, var List<agt.Cell>:neighbors): {
			self.cellGrid.addPhantomCells(gp,neighbors);
		};		 
		
		getNeighboursOfCellCity[SETUP][AGENT][CALLED](var Vector2:thisPos): {
			self.neighbors = theEnv.ENV_INTERACTION.receiveCityNeighbours(thisPos);
		};
	}; 
	internal_interactions: {
		getNeighbours[QUERY][INPUT(1)](var Vector2:cellPos, var int:dist): {
			var Neighbors<agt.Cell>:neighbors = self.cellGrid.getNeighborsFromVectorWithContext(cellPos, dist);
		};
	};  
}; 

ENVIRONMENT CellMegaCity: {
	description: "";
	environment_rules: {
		type: implicit 
		attributes: virtual
		layout_type: GRID;
	};          
	parameters: {
		var LayoutParameters:layoutParameters;
		var Vector2:numberOfCellCities;
		var Vector2:cellsPerCity;
		var Grid<grp.CellCity>:CellCityGrid;
		grp CellCity:cellCity;
	};
	functions: {
		def initialize(var Vector2:numberOfCellCities, var Vector2:cellsPerCity, var LayoutParameters:layoutParameters)(): {
			self.numberOfCellCities = numberOfCellCities;
			self.cellsPerCity = cellsPerCity;
			self.layoutParameters = layoutParameters;
			self.layoutParameters.addEntityType(GROUP.CellCity);
			
			CASL.POPULATE[CellCityGrid](self.numberOfCellCities, self.layoutParameters)[self.numberOfCellCities, GROUP.CellCity](self.cellsPerCity);
		}; 
	}; 
	behaviors: {}; 
	interactions: {		
		receiveCityNeighbours[COMMUNICATION][INPUT(1)](var Vector2:pos): {			
			var Neighbors<grp.CellCity>:neighbors = self.CellCityGrid.getNeighborsFromVectorWithContext(pos, 1);
		};
	};
	adaptation: {};
	subsystems: {};
	group_interactions: {};
};